var THREEx=THREEx||{};THREEx.DayNight={},THREEx.DayNight.baseURL="../",THREEx.DayNight.currentPhase=function(t){return Math.sin(t)>Math.sin(0)?"day":Math.sin(t)>Math.sin(-Math.PI/6)?"twilight":"night"},THREEx.DayNight.StarField=function(){var t=THREE.ImageUtils.loadTexture(THREEx.DayNight.baseURL+"images/galaxy_starfield.png"),o=new THREE.MeshBasicMaterial({map:t,side:THREE.BackSide,color:8421504}),a=new THREE.SphereGeometry(1e4,32,32),i=new THREE.Mesh(a,o);this.object3d=i,this.update=function(t){var a=THREEx.DayNight.currentPhase(t);if("day"===a)i.visible=!1;else if("twilight"===a)i.visible=!1;else{i.visible=!0,i.rotation.y=t/5;var e=Math.abs(Math.sin(t));o.color.setRGB(e,e,e)}}},THREEx.DayNight.SunLight=function(){var t=new THREE.DirectionalLight(16777215,1);t.castShadow=!0;const o=new THREE.Object3D;scene.add(o),o.translateX(110),o.translateZ(110),t.target=o,this.object3d=t,this.update=function(o){Math.sin(o)<Math.sin(0)&&(Math.sin(o),Math.sin(-Math.PI/9)),t.castShadow=!1,t.position.x=110,t.position.y=350*Math.sin(o),t.position.z=110+350*Math.cos(o);var a=THREEx.DayNight.currentPhase(o);"day"===a?(t.intensity=10,t.color.set("rgb(255,"+(Math.floor(200*Math.sin(o))+55)+","+Math.floor(200*Math.sin(o))+")")):"twilight"===a?(t.intensity=5,t.color.set("rgb("+(255-Math.floor(510*Math.sin(o)*-1))+","+(55-Math.floor(110*Math.sin(o)*-1))+",0)")):(t.intensity=.3,t.color.set("rgb(255,255,255)")),Math.sin(o)<Math.sin(0)&&(Math.sin(o),Math.sin(-Math.PI/9)),t.intensity=.3,t.color.set("rgb(255,255,255)")}},THREEx.DayNight.MoonLight=function(){var t=new THREE.DirectionalLight(16777215,1);t.castShadow=!0,t.shadowMapCullFrontFaces=!0,t.shadow.mapSize.width=12096,t.shadow.mapSize.height=12096,t.shadow.camera.near=.05,t.shadow.camera.far=1e3;const o=300;t.shadow.camera.left=-o,t.shadow.camera.right=o,t.shadow.camera.top=o,t.shadow.camera.bottom=-o,t.shadow.bias=-5e-4;const a=new THREE.CameraHelper(t.shadow.camera);scene.add(a),this.object3d=t,this.update=function(o){t.position.x=0,t.position.y=-350*Math.sin(o),t.position.z=-350*Math.cos(o);var a=THREEx.DayNight.currentPhase(o);"day"===a?t.color.set("rgb(0,"+(Math.floor(200*Math.sin(o))+55)+","+Math.floor(200*Math.sin(o))+")"):"twilight"===a?(t.intensity=1,t.color.set("rgb(0,"+(55-Math.floor(110*Math.sin(o)*-1))+","+(255-Math.floor(510*Math.sin(o)*-1))+")")):(t.intensity=.3,t.color.set("rgb(255,255,255)"))}},THREEx.DayNight.SunSphere=function(){var t=new THREE.SphereGeometry(20,30,30),o=new THREE.MeshBasicMaterial({color:16711680}),a=new THREE.Mesh(t,o);this.object3d=a,this.update=function(t){a.position.x=0,a.position.y=400*Math.sin(t),a.position.z=400*Math.cos(t);var o=THREEx.DayNight.currentPhase(t);"day"===o?a.material.color.set("rgb(255,"+(Math.floor(200*Math.sin(t))+55)+","+(Math.floor(200*Math.sin(t))+5)+")"):"twilight"===o&&a.material.color.set("rgb(255,55,5)")}},THREEx.DayNight.Skydom=function(){var t=new THREE.SphereGeometry(7e3,32,15),o=THREEx.DayNight.Skydom.Shader,a=THREE.UniformsUtils.clone(o.uniforms),i=new THREE.ShaderMaterial({vertexShader:o.vertexShader,fragmentShader:o.fragmentShader,uniforms:a,side:THREE.BackSide}),e=new THREE.Mesh(t,i);this.object3d=e,this.update=function(t){var o=THREEx.DayNight.currentPhase(t);"day"===o?(a.topColor.value.set("rgb(0,120,255)"),a.bottomColor.value.set("rgb(255,"+(Math.floor(200*Math.sin(t))+55)+","+Math.floor(200*Math.sin(t))+")")):"twilight"===o?(a.topColor.value.set("rgb(0,"+(120-Math.floor(240*Math.sin(t)*-1))+","+(255-Math.floor(510*Math.sin(t)*-1))+")"),a.bottomColor.value.set("rgb("+(255-Math.floor(510*Math.sin(t)*-1))+","+(55-Math.floor(110*Math.sin(t)*-1))+",0)")):(a.topColor.value.set("black"),a.bottomColor.value.set("black"))}},THREEx.DayNight.Skydom.Shader={uniforms:{topColor:{type:"c",value:(new THREE.Color).setHSL(.6,1,.75)},bottomColor:{type:"c",value:new THREE.Color(16777215)},offset:{type:"f",value:2400},exponent:{type:"f",value:.9}},vertexShader:["varying vec3 vWorldPosition;","void main() {","\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );","\tvWorldPosition = worldPosition.xyz;","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform vec3 topColor;","uniform vec3 bottomColor;","uniform float offset;","uniform float exponent;","varying vec3 vWorldPosition;","void main() {","\tfloat h = normalize( vWorldPosition + offset ).y;","\tgl_FragColor = vec4( mix( bottomColor, topColor, max( pow( h, exponent ), 0.0 ) ), 1.0 );","}"].join("\n")};