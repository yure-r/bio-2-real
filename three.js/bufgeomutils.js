!function(){function e(e){let t,r,o,n=0;for(let i=0;i<e.length;++i){const s=e[i];if(s.isInterleavedBufferAttribute)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. InterleavedBufferAttributes are not supported."),null;if(void 0===t&&(t=s.array.constructor),t!==s.array.constructor)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. THREE.BufferAttribute.array must be of consistent array types across matching attributes."),null;if(void 0===r&&(r=s.itemSize),r!==s.itemSize)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. THREE.BufferAttribute.itemSize must be consistent across matching attributes."),null;if(void 0===o&&(o=s.normalized),o!==s.normalized)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. THREE.BufferAttribute.normalized must be consistent across matching attributes."),null;n+=s.array.length}const i=new t(n);let s=0;for(let t=0;t<e.length;++t)i.set(e[t].array,s),s+=e[t].array.length;return new THREE.BufferAttribute(i,r,o)}function t(e){const t=e.data.array.constructor,r=e.count,o=e.itemSize,n=e.normalized,i=new t(r*o);let s;s=e.isInstancedInterleavedBufferAttribute?new InstancedBufferAttribute(i,o,n,e.meshPerAttribute):new THREE.BufferAttribute(i,o,n);for(let t=0;t<r;t++)s.setX(t,e.getX(t)),o>=2&&s.setY(t,e.getY(t)),o>=3&&s.setZ(t,e.getZ(t)),o>=4&&s.setW(t,e.getW(t));return s}THREE.BufferGeometryUtils={},THREE.BufferGeometryUtils.computeMikkTSpaceTangents=function(e,t,r=!0){if(!t||!t.isReady)throw new Error("BufferGeometryUtils: Initialized MikkTSpace library required.");if(!e.hasAttribute("position")||!e.hasAttribute("normal")||!e.hasAttribute("uv"))throw new Error('BufferGeometryUtils: Tangents require "position", "normal", and "uv" attributes.');function o(e){if(e.normalized||e.isInterleavedBufferAttribute){const t=e.isInterleavedBufferAttribute?e.data.array:e.array,r=new Float32Array(e.getCount()*e.itemSize);for(let o=0,n=0;o<e.getCount();o++)r[n++]=THREE.MathUtils.denormalize(e.getX(o),t),r[n++]=THREE.MathUtils.denormalize(e.getY(o),t),e.itemSize>2&&(r[n++]=THREE.MathUtils.denormalize(e.getZ(o),t));return r}return e.array instanceof Float32Array?e.array:new Float32Array(e.array)}const n=e.index?e.toNonIndexed():e,i=t.generateTangents(o(n.attributes.position),o(n.attributes.normal),o(n.attributes.uv));if(r)for(let e=3;e<i.length;e+=4)i[e]*=-1;return n.setAttribute("tangent",new THREE.BufferAttribute(i,4)),e!==n&&e.copy(n),e},THREE.BufferGeometryUtils.computeMorphedAttributes=function(e){if(!0!==e.geometry.isBufferGeometry)return console.error("THREE.BufferGeometryUtils: Geometry is not of type THREE.BufferGeometry."),null;const t=new THREE.Vector3,r=new THREE.Vector3,o=new THREE.Vector3,n=new THREE.Vector3,i=new THREE.Vector3,s=new THREE.Vector3,u=new THREE.Vector3,a=new THREE.Vector3,f=new THREE.Vector3;function l(e,l,m,c,g,d,E,h){t.fromBufferAttribute(l,g),r.fromBufferAttribute(l,d),o.fromBufferAttribute(l,E);const b=e.morphTargetInfluences;if(m&&b){u.set(0,0,0),a.set(0,0,0),f.set(0,0,0);for(let e=0,l=m.length;e<l;e++){const l=b[e],h=m[e];0!==l&&(n.fromBufferAttribute(h,g),i.fromBufferAttribute(h,d),s.fromBufferAttribute(h,E),c?(u.addScaledVector(n,l),a.addScaledVector(i,l),f.addScaledVector(s,l)):(u.addScaledVector(n.sub(t),l),a.addScaledVector(i.sub(r),l),f.addScaledVector(s.sub(o),l)))}t.add(u),r.add(a),o.add(f)}e.isSkinnedMesh&&(e.boneTransform(g,t),e.boneTransform(d,r),e.boneTransform(E,o)),h[3*g+0]=t.x,h[3*g+1]=t.y,h[3*g+2]=t.z,h[3*d+0]=r.x,h[3*d+1]=r.y,h[3*d+2]=r.z,h[3*E+0]=o.x,h[3*E+1]=o.y,h[3*E+2]=o.z}const m=e.geometry,c=e.material;let g,d,E;const h=m.index,b=m.attributes.position,p=m.morphAttributes.position,y=m.morphTargetsRelative,T=m.attributes.normal,B=m.morphAttributes.position,A=m.groups,R=m.drawRange;let w,H,G,U,x,I,v;const z=new Float32Array(b.count*b.itemSize),M=new Float32Array(T.count*T.itemSize);if(null!==h)if(Array.isArray(c))for(w=0,G=A.length;w<G;w++)for(x=A[w],I=Math.max(x.start,R.start),v=Math.min(x.start+x.count,R.start+R.count),H=I,U=v;H<U;H+=3)g=h.getX(H),d=h.getX(H+1),E=h.getX(H+2),l(e,b,p,y,g,d,E,z),l(e,T,B,y,g,d,E,M);else for(I=Math.max(0,R.start),v=Math.min(h.count,R.start+R.count),w=I,G=v;w<G;w+=3)g=h.getX(w),d=h.getX(w+1),E=h.getX(w+2),l(e,b,p,y,g,d,E,z),l(e,T,B,y,g,d,E,M);else if(Array.isArray(c))for(w=0,G=A.length;w<G;w++)for(x=A[w],I=Math.max(x.start,R.start),v=Math.min(x.start+x.count,R.start+R.count),H=I,U=v;H<U;H+=3)g=H,d=H+1,E=H+2,l(e,b,p,y,g,d,E,z),l(e,T,B,y,g,d,E,M);else for(I=Math.max(0,R.start),v=Math.min(b.count,R.start+R.count),w=I,G=v;w<G;w+=3)g=w,d=w+1,E=w+2,l(e,b,p,y,g,d,E,z),l(e,T,B,y,g,d,E,M);return{positionAttribute:b,normalAttribute:T,morphedPositionAttribute:new THREE.Float32BufferAttribute(z,3),morphedNormalAttribute:new THREE.Float32BufferAttribute(M,3)}},THREE.BufferGeometryUtils.computeTangents=function(){throw new Error("BufferGeometryUtils: computeTangents renamed to computeMikkTSpaceTangents.")},THREE.BufferGeometryUtils.deinterleaveAttribute=t,THREE.BufferGeometryUtils.deinterleaveGeometry=function(e){const r=e.attributes,o=e.morphTargets,n=new Map;for(const e in r){const o=r[e];o.isInterleavedBufferAttribute&&(n.has(o)||n.set(o,t(o)),r[e]=n.get(o))}for(const e in o){const r=o[e];r.isInterleavedBufferAttribute&&(n.has(r)||n.set(r,t(r)),o[e]=n.get(r))}},THREE.BufferGeometryUtils.estimateBytesUsed=function(e){let t=0;for(const r in e.attributes){const o=e.getAttribute(r);t+=o.count*o.itemSize*o.array.BYTES_PER_ELEMENT}const r=e.getIndex();return t+=r?r.count*r.itemSize*r.array.BYTES_PER_ELEMENT:0,t},THREE.BufferGeometryUtils.interleaveAttributes=function(e){let t,r=0,o=0;for(let n=0,i=e.length;n<i;++n){const i=e[n];if(void 0===t&&(t=i.array.constructor),t!==i.array.constructor)return console.error("AttributeBuffers of different types cannot be interleaved"),null;r+=i.array.length,o+=i.itemSize}const n=new THREE.InterleavedBuffer(new t(r),o);let i=0;const s=[],u=["getX","getY","getZ","getW"],a=["setX","setY","setZ","setW"];for(let t=0,r=e.length;t<r;t++){const r=e[t],o=r.itemSize,f=r.count,l=new THREE.InterleavedBufferAttribute(n,o,i,r.normalized);s.push(l),i+=o;for(let e=0;e<f;e++)for(let t=0;t<o;t++)l[a[t]](e,r[u[t]](e))}return s},THREE.BufferGeometryUtils.mergeBufferAttributes=e,THREE.BufferGeometryUtils.mergeBufferGeometries=function(t,r=!1){const o=null!==t[0].index,n=new Set(Object.keys(t[0].attributes)),i=new Set(Object.keys(t[0].morphAttributes)),s={},u={},a=t[0].morphTargetsRelative,f=new THREE.BufferGeometry;let l=0;for(let e=0;e<t.length;++e){const m=t[e];let c=0;if(o!==(null!==m.index))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+e+". All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them."),null;for(const t in m.attributes){if(!n.has(t))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+e+'. All geometries must have compatible attributes; make sure "'+t+'" attribute exists among all geometries, or in none of them.'),null;void 0===s[t]&&(s[t]=[]),s[t].push(m.attributes[t]),c++}if(c!==n.size)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+e+". Make sure all geometries have the same number of attributes."),null;if(a!==m.morphTargetsRelative)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+e+". .morphTargetsRelative must be consistent throughout all geometries."),null;for(const t in m.morphAttributes){if(!i.has(t))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+e+".  .morphAttributes must be consistent throughout all geometries."),null;void 0===u[t]&&(u[t]=[]),u[t].push(m.morphAttributes[t])}if(f.userData.mergedUserData=f.userData.mergedUserData||[],f.userData.mergedUserData.push(m.userData),r){let t;if(o)t=m.index.count;else{if(void 0===m.attributes.position)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+e+". The geometry must have either an index or a position attribute"),null;t=m.attributes.position.count}f.addGroup(l,t,e),l+=t}}if(o){let e=0;const r=[];for(let o=0;o<t.length;++o){const n=t[o].index;for(let t=0;t<n.count;++t)r.push(n.getX(t)+e);e+=t[o].attributes.position.count}f.setIndex(r)}for(const t in s){const r=e(s[t]);if(!r)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+t+" attribute."),null;f.setAttribute(t,r)}for(const t in u){const r=u[t][0].length;if(0===r)break;f.morphAttributes=f.morphAttributes||{},f.morphAttributes[t]=[];for(let o=0;o<r;++o){const r=[];for(let e=0;e<u[t].length;++e)r.push(u[t][e][o]);const n=e(r);if(!n)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+t+" morphAttribute."),null;f.morphAttributes[t].push(n)}}return f},THREE.BufferGeometryUtils.mergeGroups=function(e){if(0===e.groups.length)return console.warn("THREE.BufferGeometryUtils.mergeGroups(): No groups are defined. Nothing to merge."),e;let t=e.groups;if(t=t.sort(((e,t)=>e.materialIndex!==t.materialIndex?e.materialIndex-t.materialIndex:e.start-t.start)),null===e.getIndex()){const t=e.getAttribute("position"),r=[];for(let e=0;e<t.count;e+=3)r.push(e,e+1,e+2);e.setIndex(r)}const r=e.getIndex(),o=[];for(let e=0;e<t.length;e++){const n=t[e],i=n.start,s=i+n.count;for(let e=i;e<s;e++)o.push(r.getX(e))}e.dispose(),e.setIndex(o);let n=0;for(let e=0;e<t.length;e++){const r=t[e];r.start=n,n+=r.count}let i=t[0];e.groups=[i];for(let r=1;r<t.length;r++){const o=t[r];i.materialIndex===o.materialIndex?i.count+=o.count:(i=o,e.groups.push(i))}return e},THREE.BufferGeometryUtils.mergeVertices=function(e,t=1e-4){t=Math.max(t,Number.EPSILON);const r={},o=e.getIndex(),n=e.getAttribute("position"),i=o?o.count:n.count;let s=0;const u=Object.keys(e.attributes),a={},f={},l=[],m=["getX","getY","getZ","getW"];for(let t=0,r=u.length;t<r;t++){const r=u[t];a[r]=[];const o=e.morphAttributes[r];o&&(f[r]=new Array(o.length).fill().map((()=>[])))}const c=Math.log10(1/t),g=Math.pow(10,c);for(let t=0;t<i;t++){const n=o?o.getX(t):t;let i="";for(let t=0,r=u.length;t<r;t++){const r=u[t],o=e.getAttribute(r),s=o.itemSize;for(let e=0;e<s;e++)i+=~~(o[m[e]](n)*g)+","}if(i in r)l.push(r[i]);else{for(let t=0,r=u.length;t<r;t++){const r=u[t],o=e.getAttribute(r),i=e.morphAttributes[r],s=o.itemSize,l=a[r],c=f[r];for(let e=0;e<s;e++){const t=m[e];if(l.push(o[t](n)),i)for(let e=0,r=i.length;e<r;e++)c[e].push(i[e][t](n))}}r[i]=s,l.push(s),s++}}const d=e.clone();for(let t=0,r=u.length;t<r;t++){const r=u[t],o=e.getAttribute(r),n=new o.array.constructor(a[r]),i=new THREE.BufferAttribute(n,o.itemSize,o.normalized);if(d.setAttribute(r,i),r in f)for(let t=0;t<f[r].length;t++){const o=e.morphAttributes[r][t],n=new o.array.constructor(f[r][t]),i=new THREE.BufferAttribute(n,o.itemSize,o.normalized);d.morphAttributes[r][t]=i}}return d.setIndex(l),d},THREE.BufferGeometryUtils.toTrianglesDrawMode=function(e,t){if(t===THREE.TrianglesDrawMode)return console.warn("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles."),e;if(t===THREE.TriangleFanDrawMode||t===THREE.TriangleStripDrawMode){let r=e.getIndex();if(null===r){const t=[],o=e.getAttribute("position");if(void 0===o)return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),e;for(let e=0;e<o.count;e++)t.push(e);e.setIndex(t),r=e.getIndex()}const o=r.count-2,n=[];if(t===THREE.TriangleFanDrawMode)for(let e=1;e<=o;e++)n.push(r.getX(0)),n.push(r.getX(e)),n.push(r.getX(e+1));else for(let e=0;e<o;e++)e%2==0?(n.push(r.getX(e)),n.push(r.getX(e+1)),n.push(r.getX(e+2))):(n.push(r.getX(e+2)),n.push(r.getX(e+1)),n.push(r.getX(e)));n.length/3!==o&&console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");const i=e.clone();return i.setIndex(n),i.clearGroups(),i}return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:",t),e}}();